                                                                                      |#ifndef PROTO_SEARCH_TABOO_H_
        // derive it's best fitness                                                   |#define PROTO_SEARCH_TABOO_H_
        int backdoor_size = CountOnes(current_point);                                 |#include <random>
        const double multi = pow(2.0, backdoor_size);   // backdoor size multiplier   |#include <unordered_map>
        for (int i=0; i<sat_scans.size(); ++i){                                       |#include <vector>
                double prob = (1+i)/ps.sample_size;     // predicted SAT probability  |#include <queue>
                double cost = multi * sat_scans[i];     // backdoor cost              |#include <string>
                double fitness = prob / cost;           // fitness                    |#include "common.h"
                if (fitness > ps.best_fitness){                                       |typedef std::string PointId;
                        ps.best_fitness = fitness;      // update local record        |typedef struct PointStats
                        ps.best_cutoff  = sat_scans[i];                               |{
                }                                                                     |        PointId  point_id;
        }                                                                             |        long unsigned int sample_size;
        // and add it to DB.                                                          |        long unsigned int sat_total;
        checked_points_[current_point] = ps;                                          |        long int best_cutoff; // best scans limit
                                                                                      |        double   best_fitness;
        // Check and update global fitness record if necessary                        |} PointStats;
        if (ps.best_fitness > global_record_ptr_->best_fitness){                      |
                // New record found !!!                                               |class ComparePointStatsPtr
                global_record_ptr_= &checked_points_[current_point];                  |{
        }                                                                             |  bool reverse;
}                                                                                     |public:
                                                                                      |  ComparePointStatsPtr(const bool& revparam=false)
                                                                                      |    {reverse=revparam;}
PointId TabooSearch::GenerateNewPoint()                                               |  bool operator() (const PointStats* lhs, const PointStats* rhs) const
{                                                                                     |  {
        std::vector <PointId> candidates;                                             |    if (reverse) return (lhs->best_fitness>rhs->best_fitness);
        for(;;){                                                                      |    else return (lhs->best_fitness<rhs->best_fitness);
                // Select next origin candidate from top fitness queue                |  }
                candidates = GetUncheckedHammingNbhd(                                 |};
                                origin_candidate_queue_.top()->point_id);             |
                if (candidates.size()>0) break;                                       |typedef std::priority_queue <PointStats*, std::vector <PointStats*>, ComparePointStatsPtr > BestFitnessQu
                // All origin's neighbours were already checked, so                   |eue;
                // we remove it from queue                                            |typedef std::unordered_map <PointId, PointStats> PointStatsDB;
                candidate_queue_.pop();                                               |inline char FlipBit(char& bit){ return  bit^=1;}
        }                                                                             |class TabooSearch
        // Shuffle candidate points to even their probabilities                       |{
        std::shuffle(candidates.begin(), candidates.end(), mt);                       |public:
                                                                                      |        Sample ProcessPointResults (const PointId& current_point, const Results& results);
        return candidates[0];                                                         |        void AddPointResults (const PointId& current_point, const Results& results);
}                                                                                     |        void GetSearchStats();
                                                                                      |private:
                                                                                      |        PointStatsDB checked_points_;
                                                                                      |        BestFitnessQueue origin_candidate_queue_;
                                                                                      |        PointStats* global_record_ptr_;
                                                                                      |        //std::random_device rng;
                                                                                      |        //std::mt19937 mt(rng());
search/taboo.cpp                                                    84,33-47       70% ./search/taboo.h                                                                       43,26-33   025@EC
/cand
